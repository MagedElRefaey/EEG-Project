# -*- coding: utf-8 -*-
"""assignment 3 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kNYHmOYTqMT3bRkkda3lv4IkWdBvxNCw
"""

import pandas as pd

data=pd.read_csv("samples2.csv")

data=pd.read_csv("samples2.csv", skiprows=[0])

data1=pd.read_csv("samples2.csv", skiprows=[0])

data

data

#rename the excel file to fit our data

data=data.rename(columns={data.columns[0]:"Time",data.columns[1]:"F1",data.columns[2]:"F2",data.columns[3]:"F3",data.columns[4]:"F4",data.columns[5]:"F7",data.columns[6]:"F8",data.columns[7]:"T3",data.columns[8]:"T4",data.columns[9]:"C3",data.columns[10]:"C4",data.columns[11]:"T5",data.columns[12]:"T6",data.columns[13]:"P3",data.columns[14]:"P4",data.columns[15]:"O1",data.columns[16]:"O2",data.columns[17]:"Fz",data.columns[18]:"Cz",data.columns[19]:"Pz",data.columns[20]:"A2-A1",data.columns[21]:"ECG",data.columns[22]:"Annotation"})

#data1=data1.rename(columns={data.columns[0]:"Time",data.columns[1]:"F1",data.columns[2]:"F2",data.columns[3]:"F3",data.columns[4]:"F4",data.columns[5]:"F7",data.columns[6]:"F8",data.columns[7]:"T3",data.columns[8]:"T4",data.columns[9]:"C3",data.columns[10]:"C4",data.columns[11]:"T5",data.columns[12]:"T6",data.columns[13]:"P3",data.columns[14]:"P4",data.columns[15]:"O1",data.columns[16]:"O2",data.columns[17]:"Fz",data.columns[18]:"Cz",data.columns[19]:"Pz",data.columns[20]:"A2-A1",data.columns[21]:"ECG",data.columns[22]:"Annotation"})



data

data.Time

import matplotlib.pyplot as plt

fig=plt.figure(figsize=(15,4))
figure_details=fig.add_subplot()
figure_details.set_ylabel('F1')
figure_details.set_xlabel('Seconds')
figure_details.set_title('F1 signal')
figure_details.plot(data.Time,data.F1)
plt.show()



fs=500

import numpy as np

Time=np.arange(0,10,0.002)



#try to modify the time

data['Time']=data['Time'].map(lambda x:x[9:15])

#data1['Time']=data1['Time'].map(lambda x:x[9:15])

data.Time

window_start=0
window_end=fs

fig=plt.figure(figsize=(15,4))
figure_details=fig.add_subplot()
figure_details.set_ylabel('F1')
figure_details.set_xlabel('Seconds')
figure_details.set_title('F1 signal')
figure_details.plot(Time,data.F1)

plt.show()

#df=pd.dataframe=
fig=plt.figure(figsize=(15,4))
figure_details=fig.add_subplot()
figure_details.set_ylabel('F2')
figure_details.set_xlabel('Seconds')
figure_details.set_title('F1 signal')
figure_details.plot(Time,data.F2)

#pd.plot()
plt.show()

data

fig=plt.figure(figsize=(15,4))
figure_details=fig.add_subplot()
figure_details.set_ylabel('C4')
figure_details.set_xlabel('Seconds')
figure_details.set_title('C4 signal')
figure_details.plot(Time[window_start:2*window_end],data.C4[window_start:2*window_end])
plt.show()

from pandas import Grouper
from pandas import DataFrame
#df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list("ABCD"))
#meta=pd.Series([], name='time',dtype=pd.Timestamp)

#series=pd.read_csv('samples.csv',header=0,index_col=0,parse_dates=True,squeeze=True)

#groups=series.groupby(Grouper(freq='A'))
#years=Dataframe()
#for name,groups in groups:
    #years[name.year]=group.values
#years.plot(subplots=True,legend=False)
df =pd.DataFrame(data)
#fig=plt.figure(figsize=(20,15))
#figure_details = fig.add_subplot(211)
#figure_details.set_ylabel('C4')
#figure_details.set_xlabel('Seconds')
#figure_details.set_title('C4 signal')
#figure_details= plt.subplot2grid(Time,data)
#pd.plotting.plot_params.use('xaxis.compat': False):
  #  df["F1"].plot(color="r")
   # df["F2"].plot(color="g")
   # df["F3"].plot(color="b")



#figure_details.plot(Time,data.F1)

#figure_details.plot(Time,data.F2)


#figure_details.plot(Time,data.F3)


#from matplotlib import cm
#plt.figure()
#df.plot(colormap=cm.cubehelix)
df.plot(subplots=True, figsize=(20, 20));

#df=df.cumsum()
#plt.figure()
#df.plot()
plt.show()

df

import scipy,matplotlib

#testing to check if it is intalled correctly

print(scipy.__file__)

print(matplotlib.__file__)

#genrate the sine wave to test the library

SAMPLE_RATE=44100
DURATION=5

def generatesinwave(freq , samplerate , duration):
    z=np.linspace(0,duration,samplerate*duration,endpoint=False)
    frequencies=z*freq
    i=np.sin((2 * np.pi) * frequencies)
    return z,i
z,i=generatesinwave(2,SAMPLE_RATE,DURATION)
plt.plot(z,i)
plt.show()

# the peaks are too low so we are going to add noise to make it clear

_, nicetone=generatesinwave(400,SAMPLE_RATE,DURATION)
_, noisetone=generatesinwave(4000,SAMPLE_RATE,DURATION)
noisetone=0.3 * noisetone
mixedtone=nicetone+noisetone

normalisedtone=np.int16((mixedtone / mixedtone.max()) * 32767)
plt.plot(normalisedtone[:1000])
plt.show()

#to record the wave as an audio file we will follow the next step

from scipy.io.wavfile import write
write("sinewave.wav",SAMPLE_RATE,normalisedtone)

from scipy.fft import fft,fftfreq
N=SAMPLE_RATE*DURATION
yf=fft(normalisedtone)
xf=fftfreq(N,1/SAMPLE_RATE)
plt.plot(xf,np.abs(yf))
plt.show()

# this calculated the fft for the audio

from scipy.fft import fft,fftfreq,rfft,rfftfreq
N=SAMPLE_RATE*DURATION
y_f=rfft(normalisedtone)
x_f=rfftfreq(N,1/SAMPLE_RATE)
plt.plot(x_f,np.abs(y_f))
plt.show()

# this will make the plor faster by only take half of it

pointperfrequency=len(x_f)/(SAMPLE_RATE/2)
target=int(pointperfrequency*4000)

y_f[target-1:target+2]=0
plt.plot(x_f,np.abs(y_f))
plt.show

#now let's get started with converting the plotting the C4 into fft

frequency12=500
N1=frequency12*10

# to create a function for draw we will use the one we used before

def getwindowBorders(secondNumber, windowSize, samplingRate):
    window_start=(secondNumber-1)*samplingRate
    x=windowSize*samplingRate
    window_End=window_start+x
    return window_start,window_End
    pass

window_start,window_End=getwindowBorders(1,2,frequency12)
fig = plt.figure(figsize=(15,3))
figure_details = fig.add_subplot()
figure_details.set_ylabel('mV')
figure_details.set_xlabel('seconds')
figure_details.set_title('EEG Signal')
figure_details.plot(Time[window_start:window_End],data[data.columns[10]][window_start:window_End])
plt.show()

type(data[data.columns[10]])

data1[data1.columns[10]]
len(data1)

from scipy.fftpack import  rfft, rfftfreq
from scipy.fft import rfft, rfftfreq
#fltr=signal.lfilter(b,a,data[data.columns[10]])

#y_f1=rfft(fltr)
#x_f1=rfftfreq(N,1/500)
df =pd.DataFrame(data1)
#df[df.data1.str.contains('C4')]

fig, axs = plt.subplots()
fig.set_figheight(5)
fig.set_figwidth(18)
#rfft
#s[s.apply(lambda x: x.get('title')).str.contains('ches')]

yTf = rfft(data1[data1.columns[10]].values)
xTf = rfftfreq(N1, 1 / frequency12)
plt.plot(xTf, np.abs(yTf))
plt.show()

df

max_y=max(yTf)
max_x=xTf[np.argmax(yTf)]
max_y,max_x

from scipy import signal
f0=max_x
q=3.0
b,a=signal.iirnotch(f0,q,fs)
fltr=signal.lfilter(b,a,data[data.columns[10]])
fig,axs=plt.subplots()
fig.set_figheight(5)
fig.set_figwidth(18)
plt.plot(Time,fltr)
plt.plot(Time,data[data.columns[10]].values)

y_f2=rfft(fltr)
x_f2=rfftfreq(N1,1/frequency12)
fig,axis=plt.subplots()
fig.set_figheight(5)
fig.set_figwidth(18)
YYF1=rfft(data1[data1.columns[10]].values)
XXF1=rfftfreq(N1,1/frequency12)
plt.plot(XXF1,np.abs(YYF1))
plt.plot(x_f2,np.abs(y_f2))